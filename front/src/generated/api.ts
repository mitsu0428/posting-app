/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Posting App API
 * 完全会員制の有料掲示板アプリAPI
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreatePostRequest,
  CreateReplyRequest,
  ForgotPasswordRequest,
  GetAdminPostsParams,
  GetPosts200,
  GetPostsParams,
  LoginRequest,
  Post,
  PostAdminLogin200,
  PostAuthForgotPassword200,
  PostAuthLogin200,
  PostAuthResetPassword200,
  PostSubscriptionCreateCheckoutSession200,
  PostSubscriptionWebhookBody,
  RegisterRequest,
  Reply,
  ResetPasswordRequest,
  User,
} from './models';

import { apiMutator } from '../utils/api-mutator';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getPostingAppAPI = () => {
  /**
   * @summary ユーザー登録
   */
  const postAuthRegister = (
    registerRequest: RegisterRequest,
    options?: SecondParameter<typeof apiMutator>
  ) => {
    return apiMutator<void>(
      {
        url: `/auth/register`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: registerRequest,
      },
      options
    );
  };

  /**
   * @summary ユーザーログイン
   */
  const postAuthLogin = (
    loginRequest: LoginRequest,
    options?: SecondParameter<typeof apiMutator>
  ) => {
    return apiMutator<PostAuthLogin200>(
      {
        url: `/auth/login`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: loginRequest,
      },
      options
    );
  };

  /**
   * @summary ログアウト
   */
  const postAuthLogout = (options?: SecondParameter<typeof apiMutator>) => {
    return apiMutator<void>({ url: `/auth/logout`, method: 'POST' }, options);
  };

  /**
   * @summary パスワードリセット要求
   */
  const postAuthForgotPassword = (
    forgotPasswordRequest: ForgotPasswordRequest,
    options?: SecondParameter<typeof apiMutator>
  ) => {
    return apiMutator<PostAuthForgotPassword200>(
      {
        url: `/auth/forgot-password`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: forgotPasswordRequest,
      },
      options
    );
  };

  /**
   * @summary パスワードリセット実行
   */
  const postAuthResetPassword = (
    resetPasswordRequest: ResetPasswordRequest,
    options?: SecondParameter<typeof apiMutator>
  ) => {
    return apiMutator<PostAuthResetPassword200>(
      {
        url: `/auth/reset-password`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: resetPasswordRequest,
      },
      options
    );
  };

  /**
   * @summary 管理者ログイン
   */
  const postAdminLogin = (
    loginRequest: LoginRequest,
    options?: SecondParameter<typeof apiMutator>
  ) => {
    return apiMutator<PostAdminLogin200>(
      {
        url: `/admin/login`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: loginRequest,
      },
      options
    );
  };

  /**
   * @summary 承認済み投稿一覧取得
   */
  const getPosts = (params?: GetPostsParams, options?: SecondParameter<typeof apiMutator>) => {
    return apiMutator<GetPosts200>({ url: `/posts`, method: 'GET', params }, options);
  };

  /**
   * @summary 投稿作成
   */
  const postPosts = (
    createPostRequest: CreatePostRequest,
    options?: SecondParameter<typeof apiMutator>
  ) => {
    return apiMutator<Post>(
      {
        url: `/posts`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createPostRequest,
      },
      options
    );
  };

  /**
   * @summary 投稿詳細取得
   */
  const getPostsId = (id: number, options?: SecondParameter<typeof apiMutator>) => {
    return apiMutator<Post>({ url: `/posts/${id}`, method: 'GET' }, options);
  };

  /**
   * @summary 投稿への返信一覧取得
   */
  const getPostsIdReplies = (id: number, options?: SecondParameter<typeof apiMutator>) => {
    return apiMutator<Reply[]>({ url: `/posts/${id}/replies`, method: 'GET' }, options);
  };

  /**
   * @summary 投稿に返信
   */
  const postPostsIdReplies = (
    id: number,
    createReplyRequest: CreateReplyRequest,
    options?: SecondParameter<typeof apiMutator>
  ) => {
    return apiMutator<Reply>(
      {
        url: `/posts/${id}/replies`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createReplyRequest,
      },
      options
    );
  };

  /**
   * @summary 自分の投稿一覧取得
   */
  const getMePosts = (options?: SecondParameter<typeof apiMutator>) => {
    return apiMutator<Post[]>({ url: `/me/posts`, method: 'GET' }, options);
  };

  /**
   * @summary 全投稿一覧（管理者用）
   */
  const getAdminPosts = (
    params?: GetAdminPostsParams,
    options?: SecondParameter<typeof apiMutator>
  ) => {
    return apiMutator<Post[]>({ url: `/admin/posts`, method: 'GET', params }, options);
  };

  /**
   * @summary 投稿を承認
   */
  const postAdminPostsIdApprove = (id: number, options?: SecondParameter<typeof apiMutator>) => {
    return apiMutator<void>({ url: `/admin/posts/${id}/approve`, method: 'POST' }, options);
  };

  /**
   * @summary 投稿を却下
   */
  const postAdminPostsIdReject = (id: number, options?: SecondParameter<typeof apiMutator>) => {
    return apiMutator<void>({ url: `/admin/posts/${id}/reject`, method: 'POST' }, options);
  };

  /**
   * @summary 投稿を削除
   */
  const deleteAdminPostsId = (id: number, options?: SecondParameter<typeof apiMutator>) => {
    return apiMutator<void>({ url: `/admin/posts/${id}`, method: 'DELETE' }, options);
  };

  /**
   * @summary ユーザー一覧取得（管理者用）
   */
  const getAdminUsers = (options?: SecondParameter<typeof apiMutator>) => {
    return apiMutator<User[]>({ url: `/admin/users`, method: 'GET' }, options);
  };

  /**
   * @summary ユーザーアカウント無効化
   */
  const postAdminUsersIdDeactivate = (id: number, options?: SecondParameter<typeof apiMutator>) => {
    return apiMutator<void>({ url: `/admin/users/${id}/deactivate`, method: 'POST' }, options);
  };

  /**
   * @summary Stripe決済セッション作成
   */
  const postSubscriptionCreateCheckoutSession = (options?: SecondParameter<typeof apiMutator>) => {
    return apiMutator<PostSubscriptionCreateCheckoutSession200>(
      { url: `/subscription/create-checkout-session`, method: 'POST' },
      options
    );
  };

  /**
   * @summary Stripeウェブフック
   */
  const postSubscriptionWebhook = (
    postSubscriptionWebhookBody: PostSubscriptionWebhookBody,
    options?: SecondParameter<typeof apiMutator>
  ) => {
    return apiMutator<void>(
      {
        url: `/subscription/webhook`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postSubscriptionWebhookBody,
      },
      options
    );
  };

  return {
    postAuthRegister,
    postAuthLogin,
    postAuthLogout,
    postAuthForgotPassword,
    postAuthResetPassword,
    postAdminLogin,
    getPosts,
    postPosts,
    getPostsId,
    getPostsIdReplies,
    postPostsIdReplies,
    getMePosts,
    getAdminPosts,
    postAdminPostsIdApprove,
    postAdminPostsIdReject,
    deleteAdminPostsId,
    getAdminUsers,
    postAdminUsersIdDeactivate,
    postSubscriptionCreateCheckoutSession,
    postSubscriptionWebhook,
  };
};
export type PostAuthRegisterResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['postAuthRegister']>>
>;
export type PostAuthLoginResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['postAuthLogin']>>
>;
export type PostAuthLogoutResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['postAuthLogout']>>
>;
export type PostAuthForgotPasswordResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['postAuthForgotPassword']>>
>;
export type PostAuthResetPasswordResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['postAuthResetPassword']>>
>;
export type PostAdminLoginResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['postAdminLogin']>>
>;
export type GetPostsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['getPosts']>>
>;
export type PostPostsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['postPosts']>>
>;
export type GetPostsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['getPostsId']>>
>;
export type GetPostsIdRepliesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['getPostsIdReplies']>>
>;
export type PostPostsIdRepliesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['postPostsIdReplies']>>
>;
export type GetMePostsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['getMePosts']>>
>;
export type GetAdminPostsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['getAdminPosts']>>
>;
export type PostAdminPostsIdApproveResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['postAdminPostsIdApprove']>>
>;
export type PostAdminPostsIdRejectResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['postAdminPostsIdReject']>>
>;
export type DeleteAdminPostsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['deleteAdminPostsId']>>
>;
export type GetAdminUsersResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['getAdminUsers']>>
>;
export type PostAdminUsersIdDeactivateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['postAdminUsersIdDeactivate']>>
>;
export type PostSubscriptionCreateCheckoutSessionResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['postSubscriptionCreateCheckoutSession']>>
>;
export type PostSubscriptionWebhookResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPostingAppAPI>['postSubscriptionWebhook']>>
>;
