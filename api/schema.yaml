openapi: 3.0.0
info:
  title: Posting App API
  version: 1.0.0
  description: 完全会員制の有料掲示板アプリAPI

servers:
  - url: http://localhost:8080/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        subscription_status:
          type: string
          enum: [active, inactive, canceled]
        is_admin:
          type: boolean
        created_at:
          type: string
          format: date-time
    
    Post:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        thumbnail_url:
          type: string
        status:
          type: string
          enum: [pending, approved, rejected]
        user_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    Reply:
      type: object
      properties:
        id:
          type: integer
        post_id:
          type: integer
        content:
          type: string
        user_id:
          type: integer
        is_anonymous:
          type: boolean
        created_at:
          type: string
          format: date-time
    
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    
    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    
    ResetPasswordRequest:
      type: object
      required:
        - token
        - password
      properties:
        token:
          type: string
        password:
          type: string
    
    CreatePostRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
        content:
          type: string
        thumbnail_url:
          type: string
    
    CreateReplyRequest:
      type: object
      required:
        - content
        - is_anonymous
      properties:
        content:
          type: string
        is_anonymous:
          type: boolean
    
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

paths:
  # 認証関連
  /auth/register:
    post:
      summary: ユーザー登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: 登録成功
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/login:
    post:
      summary: ユーザーログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: 認証失敗
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/logout:
    post:
      summary: ログアウト
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ログアウト成功
  
  /auth/forgot-password:
    post:
      summary: パスワードリセット要求
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: リセットメールを送信しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/reset-password:
    post:
      summary: パスワードリセット実行
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: パスワードリセット成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 無効なトークン
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # 管理者ログイン
  /admin/login:
    post:
      summary: 管理者ログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: 認証失敗
  
  # 投稿関連
  /posts:
    get:
      summary: 承認済み投稿一覧取得
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 投稿一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  total:
                    type: integer
    
    post:
      summary: 投稿作成
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: 投稿作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: バリデーションエラー
        '401':
          description: 認証が必要
  
  /posts/{id}:
    get:
      summary: 投稿詳細取得
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 投稿詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: 投稿が見つからない
  
  /posts/{id}/replies:
    get:
      summary: 投稿への返信一覧取得
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 返信一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reply'
    
    post:
      summary: 投稿に返信
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReplyRequest'
      responses:
        '201':
          description: 返信作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
  
  # マイページ
  /me/posts:
    get:
      summary: 自分の投稿一覧取得
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 投稿一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  
  # 管理者機能
  /admin/posts:
    get:
      summary: 全投稿一覧（管理者用）
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected]
      responses:
        '200':
          description: 投稿一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  
  /admin/posts/{id}/approve:
    post:
      summary: 投稿を承認
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 承認成功
  
  /admin/posts/{id}/reject:
    post:
      summary: 投稿を却下
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 却下成功
  
  /admin/posts/{id}:
    delete:
      summary: 投稿を削除
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 削除成功
  
  /admin/users:
    get:
      summary: ユーザー一覧取得（管理者用）
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ユーザー一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  
  /admin/users/{id}/deactivate:
    post:
      summary: ユーザーアカウント無効化
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 無効化成功
  
  # Stripe決済
  /subscription/create-checkout-session:
    post:
      summary: Stripe決済セッション作成
      security:
        - bearerAuth: []
      responses:
        '200':
          description: セッション作成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
  
  /subscription/webhook:
    post:
      summary: Stripeウェブフック
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: ウェブフック処理成功