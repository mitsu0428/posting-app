openapi: 3.0.3
info:
  title: Posting App API
  description: A subscription-based posting platform with admin moderation
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Development server

paths:
  # Authentication endpoints
  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      summary: User login
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAuthLogin200'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      summary: User logout
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/forgot-password:
    post:
      summary: Request password reset
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAuthForgotPassword200'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/reset-password:
    post:
      summary: Reset password
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAuthResetPassword200'
        '400':
          $ref: '#/components/responses/BadRequest'

  # Admin authentication
  /admin/login:
    post:
      summary: Admin login
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Admin login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAdminLogin200'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # User management
  /user/profile:
    get:
      summary: Get current user profile
      tags: [User]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      summary: Update user profile
      tags: [User]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                display_name:
                  type: string
                  maxLength: 100
                bio:
                  type: string
                  maxLength: 500
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /user/change-password:
    post:
      summary: Change password
      tags: [User]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [current_password, new_password]
              properties:
                current_password:
                  type: string
                new_password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Password changed successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /user/deactivate:
    post:
      summary: Deactivate user account
      tags: [User]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Account deactivated successfully
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Posts
  /posts:
    get:
      summary: Get approved posts
      tags: [Posts]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/GetPostsParams'
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPosts200'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create a new post
      tags: [Posts]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /posts/{id}:
    get:
      summary: Get post by ID
      tags: [Posts]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update post
      tags: [Posts]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete post
      tags: [Posts]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Post deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /posts/{id}/replies:
    post:
      summary: Create a reply to a post
      tags: [Posts]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReplyRequest'
      responses:
        '201':
          description: Reply created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # My page
  /user/posts:
    get:
      summary: Get current user's posts
      tags: [User]
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: User's posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPosts200'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Admin endpoints
  /admin/posts:
    get:
      summary: Get posts for admin review
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/GetAdminPostsParams'
      responses:
        '200':
          description: List of posts for admin review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPosts200'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/posts/{id}/approve:
    post:
      summary: Approve a post
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post approved successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/posts/{id}/reject:
    post:
      summary: Reject a post
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post rejected successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/users:
    get:
      summary: Get users for admin management
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/users/{id}/ban:
    post:
      summary: Ban a user
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User banned successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Subscription endpoints
  /subscription/status:
    get:
      summary: Get user subscription status
      tags: [Subscription]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Subscription status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/UserSubscriptionStatus'
                  current_period_end:
                    type: string
                    format: date-time
                    nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'

  /subscription/create-checkout-session:
    post:
      summary: Create Stripe checkout session
      tags: [Subscription]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Checkout session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSubscriptionCreateCheckoutSession200'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /subscription/webhook:
    post:
      summary: Stripe webhook endpoint
      tags: [Subscription]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSubscriptionWebhookBody'
      responses:
        '200':
          description: Webhook processed successfully

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    GetPostsParams:
      in: query
      name: params
      schema:
        $ref: '#/components/schemas/GetPostsParams'

    GetAdminPostsParams:
      in: query
      name: params
      schema:
        $ref: '#/components/schemas/GetAdminPostsParams'

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string

    User:
      type: object
      required: [id, email, display_name, role, subscription_status, created_at]
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        display_name:
          type: string
        bio:
          type: string
          nullable: true
        role:
          type: string
          enum: [user, admin]
        subscription_status:
          $ref: '#/components/schemas/UserSubscriptionStatus'
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Post:
      type: object
      required: [id, title, content, author, status, created_at]
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        thumbnail_url:
          type: string
          nullable: true
        author:
          $ref: '#/components/schemas/User'
        status:
          $ref: '#/components/schemas/PostStatus'
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Reply'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Reply:
      type: object
      required: [id, content, post_id, created_at]
      properties:
        id:
          type: integer
        content:
          type: string
        post_id:
          type: integer
        author:
          $ref: '#/components/schemas/User'
          nullable: true
        is_anonymous:
          type: boolean
        created_at:
          type: string
          format: date-time

    PostStatus:
      type: string
      enum: [pending, approved, rejected]

    UserSubscriptionStatus:
      type: string
      enum: [active, inactive, past_due, canceled]

    GetAdminPostsStatus:
      type: string
      enum: [pending, approved, rejected, all]

    RegisterRequest:
      type: object
      required: [email, password, display_name]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        display_name:
          type: string
          maxLength: 100

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    ForgotPasswordRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email

    ResetPasswordRequest:
      type: object
      required: [token, new_password]
      properties:
        token:
          type: string
        new_password:
          type: string
          minLength: 8

    CreatePostRequest:
      type: object
      required: [title, content]
      properties:
        title:
          type: string
          maxLength: 200
        content:
          type: string
          maxLength: 5000
        thumbnail:
          type: string
          format: binary

    CreateReplyRequest:
      type: object
      required: [content, is_anonymous]
      properties:
        content:
          type: string
          maxLength: 2000
        is_anonymous:
          type: boolean

    GetPostsParams:
      type: object
      properties:
        page:
          type: integer
          default: 1
        limit:
          type: integer
          default: 20

    GetAdminPostsParams:
      type: object
      properties:
        page:
          type: integer
          default: 1
        limit:
          type: integer
          default: 20
        status:
          $ref: '#/components/schemas/GetAdminPostsStatus'

    GetPosts200:
      type: object
      required: [posts, total, page, limit]
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer

    PostAuthLogin200:
      type: object
      required: [user, access_token]
      properties:
        user:
          $ref: '#/components/schemas/User'
        access_token:
          type: string

    PostAdminLogin200:
      type: object
      required: [user, access_token]
      properties:
        user:
          $ref: '#/components/schemas/User'
        access_token:
          type: string

    PostAuthForgotPassword200:
      type: object
      required: [message]
      properties:
        message:
          type: string

    PostAuthResetPassword200:
      type: object
      required: [message]
      properties:
        message:
          type: string

    PostSubscriptionCreateCheckoutSession200:
      type: object
      required: [url]
      properties:
        url:
          type: string

    PostSubscriptionWebhookBody:
      type: object
      properties:
        type:
          type: string
        data:
          type: object