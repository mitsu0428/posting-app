version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: posting_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=posting_app
      - DB_SSLMODE=disable
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_ACCESS_DURATION=15m
      - JWT_REFRESH_DURATION=720h
      - STRIPE_API_KEY=sk_test_your_stripe_secret_key_here
      - STRIPE_PRICE_ID=price_your_stripe_price_id_here
      - STRIPE_WEBHOOK_SECRET=whsec_your_stripe_webhook_secret_here
      - BASE_URL=http://localhost:3000
      - PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    restart: unless-stopped

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./front:/app
      - /app/node_modules
    restart: unless-stopped

volumes:
  postgres_data:
  backend_uploads: